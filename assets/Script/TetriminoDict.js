

window.tm = window.tm || {};

tm.Direction = cc.Enum({
    None:    9,
    Up:      0,
    Down:    1,
    Left:    2,
    Right:   3,
    Rotate:  4
});

// 网格矩阵的宽高数量
tm.grid_width = 10;
tm.grid_height = 20;

// 单个块元素宽高
tm.brick_width  = 46;
tm.brick_height = 46;

// 每个元素块包含4个基本块元素
tm.brick_cell_num = 4;


/**
 * 元素种类及各个变形信息定义
 * @type {}
 */
tm.TetriminoDict = [
    /**
     * 方块元素, 仅一种变化
     */
    [
        /**
         * oo
         * oo
         */
        [
            [0, 0, 0, 0],
            [0, 1, 1, 0],
            [0, 1, 1, 0],
            [0, 0, 0, 0]
        ]
    ],

    // T形元素, 共四种变化
    [
        /**
         *    o
         *   ooo
         */
        [
            [0, 0, 0, 0],
            [0, 1, 0, 0],
            [1, 1, 1, 0],
            [0, 0, 0, 0]
        ],

        /**
         *    o
         *    oo
         *    o
         */
        [
            [0, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 1, 0],
            [0, 1, 0, 0]
        ],

        /**
         *   ooo
         *    o
         */
        [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [1, 1, 1, 0],
            [0, 1, 0, 0]
        ],

        /**
         *    o
         *   oo
         *    o
         */
        [
            [0, 0, 0, 0],
            [0, 1, 0, 0],
            [1, 1, 0, 0],
            [0, 1, 0, 0]
        ]
    ],

    //I形元素, 共两种变化
    [
        /**
         *    o
         *    o
         *    o
         *    o
         */
        [
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0]
        ],

        /**
         *    oooo
         */
        [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [1, 1, 1, 1],
            [0, 0, 0, 0]
        ]
    ],

    // L形元素, 共四种变化
    [
        /**
         *    o
         *    o
         *    oo
         */
        [
            [0, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 1, 0]
        ],

        /**
         *   ooo
         *   o
         */
        [
            [0, 0, 0, 0],
            [0, 1, 1, 1],
            [0, 1, 0, 0],
            [0, 0, 0, 0]
        ],

        /**
         *   oo
         *    o
         *    o
         */
        [
            [0, 0, 0, 0],
            [0, 1, 1, 0],
            [0, 0, 1, 0],
            [0, 0, 1, 0]
        ],

        /**
         *     o
         *   ooo
         */
        [
            [0, 0, 0, 0],
            [0, 0, 1, 0],
            [1, 1, 1, 0],
            [0, 0, 0, 0]
        ]
    ],

    // 反L形元素, 共四种变化
    [
        /**
         *    o
         *    o
         *   oo
         */
        [
            [0, 0, 0, 0],
            [0, 0, 1, 0],
            [0, 0, 1, 0],
            [0, 1, 1, 0]
        ],

        /**
         *   o
         *   ooo
         */
        [
            [0, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 1, 1],
            [0, 0, 0, 0]
        ],

        /**
         *    oo
         *    o
         *    o
         */
        [
            [0, 0, 0, 0],
            [0, 1, 1, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0]
        ],

        /**
         *   ooo
         *     o
         */
        [
            [0, 0, 0, 0],
            [1, 1, 1, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 0]
        ]
    ],


    // Z形元素, 共两种变化
    [
        /**
         *    o
         *   oo
         *   o
         */
        [
            [0, 0, 0, 0],
            [0, 0, 1, 0],
            [0, 1, 1, 0],
            [0, 1, 0, 0]
        ],

        /**
         *   oo
         *    oo
         */
        [
            [0, 0, 0, 0],
            [0, 1, 1, 0],
            [0, 0, 1, 1],
            [0, 0, 0, 0]
        ]
    ],

    // 反Z形元素, 共两种变化
    [
        /**
         *   o
         *   oo
         *    o
         */
        [
            [0, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 1, 0],
            [0, 0, 1, 0]
        ],

        /**
         *    oo
         *   oo
         */
        [
            [0, 0, 0, 0],
            [0, 0, 1, 1],
            [0, 1, 1, 0],
            [0, 0, 0, 0]
        ]
    ]
];

tm.getTetriPaddings = function(bricksMap) {
    var paddings = {top: 0, right: 0, left: 0};
    var row = tm.brick_cell_num;

    while (row--) {
        if (!Grid.rowIsEmpty(bricksMap[row])) break;
        paddings.top++;
    }

    for (var i = 0; i < Tetrimino.SIZE; i++) {
        if (!Grid.colIsEmpty(bricksMap, i)) break;
        paddings.left++;
    }

    var col = tm.brick_cell_num;
    while (col--) {
        if (!Grid.colIsEmpty(bricksMap, col)) break;
        paddings.right++;
    }
    return paddings;
};